// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kkrt-labs/zk-pig/src/store (interfaces: BlockStore)
//
// Generated by this command:
//
//	mockgen -destination=./mock/block_store.go -package=mockstore github.com/kkrt-labs/zk-pig/src/store BlockStore
//

// Package mockstore is a generated GoMock package.
package mockstore

import (
	context "context"
	reflect "reflect"

	rpc "github.com/kkrt-labs/go-utils/ethereum/rpc"
	gomock "go.uber.org/mock/gomock"
)

// MockBlockStore is a mock of BlockStore interface.
type MockBlockStore struct {
	ctrl     *gomock.Controller
	recorder *MockBlockStoreMockRecorder
	isgomock struct{}
}

// MockBlockStoreMockRecorder is the mock recorder for MockBlockStore.
type MockBlockStoreMockRecorder struct {
	mock *MockBlockStore
}

// NewMockBlockStore creates a new mock instance.
func NewMockBlockStore(ctrl *gomock.Controller) *MockBlockStore {
	mock := &MockBlockStore{ctrl: ctrl}
	mock.recorder = &MockBlockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockStore) EXPECT() *MockBlockStoreMockRecorder {
	return m.recorder
}

// LoadBlock mocks base method.
func (m *MockBlockStore) LoadBlock(ctx context.Context, chainID, blockNumber uint64) (*rpc.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadBlock", ctx, chainID, blockNumber)
	ret0, _ := ret[0].(*rpc.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadBlock indicates an expected call of LoadBlock.
func (mr *MockBlockStoreMockRecorder) LoadBlock(ctx, chainID, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadBlock", reflect.TypeOf((*MockBlockStore)(nil).LoadBlock), ctx, chainID, blockNumber)
}

// StoreBlock mocks base method.
func (m *MockBlockStore) StoreBlock(ctx context.Context, chainID uint64, block *rpc.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBlock", ctx, chainID, block)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreBlock indicates an expected call of StoreBlock.
func (mr *MockBlockStoreMockRecorder) StoreBlock(ctx, chainID, block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBlock", reflect.TypeOf((*MockBlockStore)(nil).StoreBlock), ctx, chainID, block)
}
