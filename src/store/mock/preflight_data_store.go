// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kkrt-labs/zk-pig/src/store (interfaces: PreflightDataStore)
//
// Generated by this command:
//
//	mockgen -destination=./mock/preflight_data_store.go -package=mockstore github.com/kkrt-labs/zk-pig/src/store PreflightDataStore
//

// Package mockstore is a generated GoMock package.
package mockstore

import (
	context "context"
	reflect "reflect"

	steps "github.com/kkrt-labs/zk-pig/src/steps"
	gomock "go.uber.org/mock/gomock"
)

// MockPreflightDataStore is a mock of PreflightDataStore interface.
type MockPreflightDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockPreflightDataStoreMockRecorder
	isgomock struct{}
}

// MockPreflightDataStoreMockRecorder is the mock recorder for MockPreflightDataStore.
type MockPreflightDataStoreMockRecorder struct {
	mock *MockPreflightDataStore
}

// NewMockPreflightDataStore creates a new mock instance.
func NewMockPreflightDataStore(ctrl *gomock.Controller) *MockPreflightDataStore {
	mock := &MockPreflightDataStore{ctrl: ctrl}
	mock.recorder = &MockPreflightDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPreflightDataStore) EXPECT() *MockPreflightDataStoreMockRecorder {
	return m.recorder
}

// LoadPreflightData mocks base method.
func (m *MockPreflightDataStore) LoadPreflightData(ctx context.Context, chainID, blockNumber uint64) (*steps.PreflightData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPreflightData", ctx, chainID, blockNumber)
	ret0, _ := ret[0].(*steps.PreflightData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadPreflightData indicates an expected call of LoadPreflightData.
func (mr *MockPreflightDataStoreMockRecorder) LoadPreflightData(ctx, chainID, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPreflightData", reflect.TypeOf((*MockPreflightDataStore)(nil).LoadPreflightData), ctx, chainID, blockNumber)
}

// StorePreflightData mocks base method.
func (m *MockPreflightDataStore) StorePreflightData(ctx context.Context, inputs *steps.PreflightData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePreflightData", ctx, inputs)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorePreflightData indicates an expected call of StorePreflightData.
func (mr *MockPreflightDataStoreMockRecorder) StorePreflightData(ctx, inputs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePreflightData", reflect.TypeOf((*MockPreflightDataStore)(nil).StorePreflightData), ctx, inputs)
}
