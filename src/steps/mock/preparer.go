// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kkrt-labs/zk-pig/src/steps (interfaces: Preparer)
//
// Generated by this command:
//
//	mockgen -destination=./mock/preparer.go -package=mocksteps github.com/kkrt-labs/zk-pig/src/steps Preparer
//

// Package mocksteps is a generated GoMock package.
package mocksteps

import (
	context "context"
	reflect "reflect"

	input "github.com/kkrt-labs/zk-pig/src/prover-input"
	steps "github.com/kkrt-labs/zk-pig/src/steps"
	gomock "go.uber.org/mock/gomock"
)

// MockPreparer is a mock of Preparer interface.
type MockPreparer struct {
	ctrl     *gomock.Controller
	recorder *MockPreparerMockRecorder
	isgomock struct{}
}

// MockPreparerMockRecorder is the mock recorder for MockPreparer.
type MockPreparerMockRecorder struct {
	mock *MockPreparer
}

// NewMockPreparer creates a new mock instance.
func NewMockPreparer(ctrl *gomock.Controller) *MockPreparer {
	mock := &MockPreparer{ctrl: ctrl}
	mock.recorder = &MockPreparerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPreparer) EXPECT() *MockPreparerMockRecorder {
	return m.recorder
}

// Prepare mocks base method.
func (m *MockPreparer) Prepare(ctx context.Context, data *steps.PreflightData) (*input.ProverInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", ctx, data)
	ret0, _ := ret[0].(*input.ProverInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MockPreparerMockRecorder) Prepare(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockPreparer)(nil).Prepare), ctx, data)
}
