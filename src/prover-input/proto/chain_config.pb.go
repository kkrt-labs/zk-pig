// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: src/prover-input/proto/chain_config.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChainConfig struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ChainId                 []byte                 `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	HomesteadBlock          []byte                 `protobuf:"bytes,2,opt,name=homestead_block,json=homesteadBlock,proto3,oneof" json:"homestead_block,omitempty"`
	DaoForkBlock            []byte                 `protobuf:"bytes,3,opt,name=dao_fork_block,json=daoForkBlock,proto3,oneof" json:"dao_fork_block,omitempty"`
	DaoForkSupport          *bool                  `protobuf:"varint,4,opt,name=dao_fork_support,json=daoForkSupport,proto3,oneof" json:"dao_fork_support,omitempty"`
	Eip150Block             []byte                 `protobuf:"bytes,5,opt,name=eip150_block,json=eip150Block,proto3,oneof" json:"eip150_block,omitempty"`
	Eip155Block             []byte                 `protobuf:"bytes,6,opt,name=eip155_block,json=eip155Block,proto3,oneof" json:"eip155_block,omitempty"`
	Eip158Block             []byte                 `protobuf:"bytes,7,opt,name=eip158_block,json=eip158Block,proto3,oneof" json:"eip158_block,omitempty"`
	ByzantiumBlock          []byte                 `protobuf:"bytes,8,opt,name=byzantium_block,json=byzantiumBlock,proto3,oneof" json:"byzantium_block,omitempty"`
	ConstantinopleBlock     []byte                 `protobuf:"bytes,9,opt,name=constantinople_block,json=constantinopleBlock,proto3,oneof" json:"constantinople_block,omitempty"`
	PetersburgBlock         []byte                 `protobuf:"bytes,10,opt,name=petersburg_block,json=petersburgBlock,proto3,oneof" json:"petersburg_block,omitempty"`
	IstanbulBlock           []byte                 `protobuf:"bytes,11,opt,name=istanbul_block,json=istanbulBlock,proto3,oneof" json:"istanbul_block,omitempty"`
	MuirGlacierBlock        []byte                 `protobuf:"bytes,12,opt,name=muir_glacier_block,json=muirGlacierBlock,proto3,oneof" json:"muir_glacier_block,omitempty"`
	BerlinBlock             []byte                 `protobuf:"bytes,13,opt,name=berlin_block,json=berlinBlock,proto3,oneof" json:"berlin_block,omitempty"`
	LondonBlock             []byte                 `protobuf:"bytes,14,opt,name=london_block,json=londonBlock,proto3,oneof" json:"london_block,omitempty"`
	ArrowGlacierBlock       []byte                 `protobuf:"bytes,15,opt,name=arrow_glacier_block,json=arrowGlacierBlock,proto3,oneof" json:"arrow_glacier_block,omitempty"`
	GrayGlacierBlock        []byte                 `protobuf:"bytes,16,opt,name=gray_glacier_block,json=grayGlacierBlock,proto3,oneof" json:"gray_glacier_block,omitempty"`
	MergeNetsplitBlock      []byte                 `protobuf:"bytes,17,opt,name=merge_netsplit_block,json=mergeNetsplitBlock,proto3,oneof" json:"merge_netsplit_block,omitempty"`
	ShanghaiTime            *uint64                `protobuf:"varint,18,opt,name=shanghai_time,json=shanghaiTime,proto3,oneof" json:"shanghai_time,omitempty"`
	CancunTime              *uint64                `protobuf:"varint,19,opt,name=cancun_time,json=cancunTime,proto3,oneof" json:"cancun_time,omitempty"`
	PragueTime              *uint64                `protobuf:"varint,20,opt,name=prague_time,json=pragueTime,proto3,oneof" json:"prague_time,omitempty"`
	VerkleTime              *uint64                `protobuf:"varint,21,opt,name=verkle_time,json=verkleTime,proto3,oneof" json:"verkle_time,omitempty"`
	TerminalTotalDifficulty []byte                 `protobuf:"bytes,22,opt,name=terminal_total_difficulty,json=terminalTotalDifficulty,proto3,oneof" json:"terminal_total_difficulty,omitempty"`
	DepositContractAddress  []byte                 `protobuf:"bytes,23,opt,name=deposit_contract_address,json=depositContractAddress,proto3,oneof" json:"deposit_contract_address,omitempty"`
	Ethash                  []byte                 `protobuf:"bytes,24,opt,name=ethash,proto3,oneof" json:"ethash,omitempty"`
	Clique                  *CliqueConfig          `protobuf:"bytes,25,opt,name=clique,proto3,oneof" json:"clique,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ChainConfig) Reset() {
	*x = ChainConfig{}
	mi := &file_src_prover_input_proto_chain_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainConfig) ProtoMessage() {}

func (x *ChainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_src_prover_input_proto_chain_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainConfig.ProtoReflect.Descriptor instead.
func (*ChainConfig) Descriptor() ([]byte, []int) {
	return file_src_prover_input_proto_chain_config_proto_rawDescGZIP(), []int{0}
}

func (x *ChainConfig) GetChainId() []byte {
	if x != nil {
		return x.ChainId
	}
	return nil
}

func (x *ChainConfig) GetHomesteadBlock() []byte {
	if x != nil {
		return x.HomesteadBlock
	}
	return nil
}

func (x *ChainConfig) GetDaoForkBlock() []byte {
	if x != nil {
		return x.DaoForkBlock
	}
	return nil
}

func (x *ChainConfig) GetDaoForkSupport() bool {
	if x != nil && x.DaoForkSupport != nil {
		return *x.DaoForkSupport
	}
	return false
}

func (x *ChainConfig) GetEip150Block() []byte {
	if x != nil {
		return x.Eip150Block
	}
	return nil
}

func (x *ChainConfig) GetEip155Block() []byte {
	if x != nil {
		return x.Eip155Block
	}
	return nil
}

func (x *ChainConfig) GetEip158Block() []byte {
	if x != nil {
		return x.Eip158Block
	}
	return nil
}

func (x *ChainConfig) GetByzantiumBlock() []byte {
	if x != nil {
		return x.ByzantiumBlock
	}
	return nil
}

func (x *ChainConfig) GetConstantinopleBlock() []byte {
	if x != nil {
		return x.ConstantinopleBlock
	}
	return nil
}

func (x *ChainConfig) GetPetersburgBlock() []byte {
	if x != nil {
		return x.PetersburgBlock
	}
	return nil
}

func (x *ChainConfig) GetIstanbulBlock() []byte {
	if x != nil {
		return x.IstanbulBlock
	}
	return nil
}

func (x *ChainConfig) GetMuirGlacierBlock() []byte {
	if x != nil {
		return x.MuirGlacierBlock
	}
	return nil
}

func (x *ChainConfig) GetBerlinBlock() []byte {
	if x != nil {
		return x.BerlinBlock
	}
	return nil
}

func (x *ChainConfig) GetLondonBlock() []byte {
	if x != nil {
		return x.LondonBlock
	}
	return nil
}

func (x *ChainConfig) GetArrowGlacierBlock() []byte {
	if x != nil {
		return x.ArrowGlacierBlock
	}
	return nil
}

func (x *ChainConfig) GetGrayGlacierBlock() []byte {
	if x != nil {
		return x.GrayGlacierBlock
	}
	return nil
}

func (x *ChainConfig) GetMergeNetsplitBlock() []byte {
	if x != nil {
		return x.MergeNetsplitBlock
	}
	return nil
}

func (x *ChainConfig) GetShanghaiTime() uint64 {
	if x != nil && x.ShanghaiTime != nil {
		return *x.ShanghaiTime
	}
	return 0
}

func (x *ChainConfig) GetCancunTime() uint64 {
	if x != nil && x.CancunTime != nil {
		return *x.CancunTime
	}
	return 0
}

func (x *ChainConfig) GetPragueTime() uint64 {
	if x != nil && x.PragueTime != nil {
		return *x.PragueTime
	}
	return 0
}

func (x *ChainConfig) GetVerkleTime() uint64 {
	if x != nil && x.VerkleTime != nil {
		return *x.VerkleTime
	}
	return 0
}

func (x *ChainConfig) GetTerminalTotalDifficulty() []byte {
	if x != nil {
		return x.TerminalTotalDifficulty
	}
	return nil
}

func (x *ChainConfig) GetDepositContractAddress() []byte {
	if x != nil {
		return x.DepositContractAddress
	}
	return nil
}

func (x *ChainConfig) GetEthash() []byte {
	if x != nil {
		return x.Ethash
	}
	return nil
}

func (x *ChainConfig) GetClique() *CliqueConfig {
	if x != nil {
		return x.Clique
	}
	return nil
}

type CliqueConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Period        uint64                 `protobuf:"varint,1,opt,name=period,proto3" json:"period,omitempty"`
	Epoch         uint64                 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CliqueConfig) Reset() {
	*x = CliqueConfig{}
	mi := &file_src_prover_input_proto_chain_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CliqueConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliqueConfig) ProtoMessage() {}

func (x *CliqueConfig) ProtoReflect() protoreflect.Message {
	mi := &file_src_prover_input_proto_chain_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliqueConfig.ProtoReflect.Descriptor instead.
func (*CliqueConfig) Descriptor() ([]byte, []int) {
	return file_src_prover_input_proto_chain_config_proto_rawDescGZIP(), []int{1}
}

func (x *CliqueConfig) GetPeriod() uint64 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *CliqueConfig) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

var File_src_prover_input_proto_chain_config_proto protoreflect.FileDescriptor

var file_src_prover_input_proto_chain_config_proto_rawDesc = []byte{
	0x0a, 0x29, 0x73, 0x72, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x22, 0xcf, 0x0c, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0e, 0x68, 0x6f, 0x6d, 0x65, 0x73, 0x74,
	0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x64,
	0x61, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0c, 0x64, 0x61, 0x6f, 0x46, 0x6f, 0x72, 0x6b, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x61, 0x6f, 0x5f, 0x66, 0x6f,
	0x72, 0x6b, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x02, 0x52, 0x0e, 0x64, 0x61, 0x6f, 0x46, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x65, 0x69, 0x70, 0x31, 0x35, 0x30, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x0b, 0x65,
	0x69, 0x70, 0x31, 0x35, 0x30, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x65, 0x69, 0x70, 0x31, 0x35, 0x35, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x04, 0x52, 0x0b, 0x65, 0x69, 0x70, 0x31, 0x35, 0x35, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x65, 0x69, 0x70, 0x31, 0x35, 0x38, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52, 0x0b, 0x65,
	0x69, 0x70, 0x31, 0x35, 0x38, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0f, 0x62, 0x79, 0x7a, 0x61, 0x6e, 0x74, 0x69, 0x75, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x0e, 0x62, 0x79, 0x7a, 0x61, 0x6e, 0x74,
	0x69, 0x75, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x07, 0x52, 0x13, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x70, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x65, 0x74, 0x65, 0x72, 0x73, 0x62, 0x75, 0x72,
	0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x08, 0x52,
	0x0f, 0x70, 0x65, 0x74, 0x65, 0x72, 0x73, 0x62, 0x75, 0x72, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x62, 0x75, 0x6c, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x09, 0x52, 0x0d, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x62, 0x75, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x12, 0x6d, 0x75, 0x69, 0x72, 0x5f, 0x67, 0x6c, 0x61, 0x63, 0x69, 0x65, 0x72, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0a, 0x52, 0x10, 0x6d,
	0x75, 0x69, 0x72, 0x47, 0x6c, 0x61, 0x63, 0x69, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0b, 0x52, 0x0b, 0x62, 0x65, 0x72, 0x6c,
	0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f,
	0x6e, 0x64, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x0c, 0x52, 0x0b, 0x6c, 0x6f, 0x6e, 0x64, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x67, 0x6c, 0x61, 0x63,
	0x69, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x0d, 0x52, 0x11, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x47, 0x6c, 0x61, 0x63, 0x69, 0x65, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x67, 0x72, 0x61, 0x79, 0x5f,
	0x67, 0x6c, 0x61, 0x63, 0x69, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x0e, 0x52, 0x10, 0x67, 0x72, 0x61, 0x79, 0x47, 0x6c, 0x61, 0x63, 0x69,
	0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0f, 0x52, 0x12, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x4e, 0x65, 0x74, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x6e, 0x67, 0x68, 0x61, 0x69, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x48, 0x10, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x6e,
	0x67, 0x68, 0x61, 0x69, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63,
	0x61, 0x6e, 0x63, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x11, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x48, 0x12, 0x52, 0x0a, 0x70, 0x72, 0x61, 0x67, 0x75, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x48, 0x13, 0x52, 0x0a,
	0x76, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a,
	0x19, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x14, 0x52, 0x17, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x18, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x15, 0x52, 0x16, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x65, 0x74, 0x68, 0x61, 0x73, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x16, 0x52,
	0x06, 0x65, 0x74, 0x68, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6c,
	0x69, 0x71, 0x75, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x17, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x61, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x64, 0x61, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6b,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x69, 0x70,
	0x31, 0x35, 0x30, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x69,
	0x70, 0x31, 0x35, 0x35, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65,
	0x69, 0x70, 0x31, 0x35, 0x38, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x62, 0x79, 0x7a, 0x61, 0x6e, 0x74, 0x69, 0x75, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x70,
	0x6c, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x62, 0x75, 0x72, 0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x62, 0x75, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d, 0x75, 0x69, 0x72, 0x5f, 0x67, 0x6c, 0x61, 0x63, 0x69, 0x65,
	0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x65, 0x72, 0x6c,
	0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x6e,
	0x64, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x72,
	0x72, 0x6f, 0x77, 0x5f, 0x67, 0x6c, 0x61, 0x63, 0x69, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x67, 0x72, 0x61, 0x79, 0x5f, 0x67, 0x6c, 0x61, 0x63, 0x69,
	0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x68, 0x61, 0x6e, 0x67, 0x68, 0x61, 0x69, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x75, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x76, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x65, 0x74, 0x68, 0x61, 0x73, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6c,
	0x69, 0x71, 0x75, 0x65, 0x22, 0x3c, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6b, 0x6b, 0x72, 0x74, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x7a, 0x6b, 0x2d, 0x70, 0x69,
	0x67, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_prover_input_proto_chain_config_proto_rawDescOnce sync.Once
	file_src_prover_input_proto_chain_config_proto_rawDescData = file_src_prover_input_proto_chain_config_proto_rawDesc
)

func file_src_prover_input_proto_chain_config_proto_rawDescGZIP() []byte {
	file_src_prover_input_proto_chain_config_proto_rawDescOnce.Do(func() {
		file_src_prover_input_proto_chain_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_prover_input_proto_chain_config_proto_rawDescData)
	})
	return file_src_prover_input_proto_chain_config_proto_rawDescData
}

var file_src_prover_input_proto_chain_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_src_prover_input_proto_chain_config_proto_goTypes = []any{
	(*ChainConfig)(nil),  // 0: input.ChainConfig
	(*CliqueConfig)(nil), // 1: input.CliqueConfig
}
var file_src_prover_input_proto_chain_config_proto_depIdxs = []int32{
	1, // 0: input.ChainConfig.clique:type_name -> input.CliqueConfig
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_src_prover_input_proto_chain_config_proto_init() }
func file_src_prover_input_proto_chain_config_proto_init() {
	if File_src_prover_input_proto_chain_config_proto != nil {
		return
	}
	file_src_prover_input_proto_chain_config_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_prover_input_proto_chain_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_src_prover_input_proto_chain_config_proto_goTypes,
		DependencyIndexes: file_src_prover_input_proto_chain_config_proto_depIdxs,
		MessageInfos:      file_src_prover_input_proto_chain_config_proto_msgTypes,
	}.Build()
	File_src_prover_input_proto_chain_config_proto = out.File
	file_src_prover_input_proto_chain_config_proto_rawDesc = nil
	file_src_prover_input_proto_chain_config_proto_goTypes = nil
	file_src_prover_input_proto_chain_config_proto_depIdxs = nil
}
