// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: src/prover-input/proto/input.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ProverInput contains the minimal data needed for block execution and proof validation
type ProverInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Block         *Block                 `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	Ancestors     []*AncestorHeader      `protobuf:"bytes,2,rep,name=ancestors,proto3" json:"ancestors,omitempty"`
	ChainConfig   *ChainConfig           `protobuf:"bytes,3,opt,name=chain_config,json=chainConfig,proto3" json:"chain_config,omitempty"`
	Codes         [][]byte               `protobuf:"bytes,4,rep,name=codes,proto3" json:"codes,omitempty"`
	PreState      [][]byte               `protobuf:"bytes,5,rep,name=pre_state,json=preState,proto3" json:"pre_state,omitempty"`
	AccessList    map[string]*AccessList `protobuf:"bytes,6,rep,name=access_list,json=accessList,proto3" json:"access_list,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // address -> storage slots
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProverInput) Reset() {
	*x = ProverInput{}
	mi := &file_src_prover_input_proto_input_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProverInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProverInput) ProtoMessage() {}

func (x *ProverInput) ProtoReflect() protoreflect.Message {
	mi := &file_src_prover_input_proto_input_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProverInput.ProtoReflect.Descriptor instead.
func (*ProverInput) Descriptor() ([]byte, []int) {
	return file_src_prover_input_proto_input_proto_rawDescGZIP(), []int{0}
}

func (x *ProverInput) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *ProverInput) GetAncestors() []*AncestorHeader {
	if x != nil {
		return x.Ancestors
	}
	return nil
}

func (x *ProverInput) GetChainConfig() *ChainConfig {
	if x != nil {
		return x.ChainConfig
	}
	return nil
}

func (x *ProverInput) GetCodes() [][]byte {
	if x != nil {
		return x.Codes
	}
	return nil
}

func (x *ProverInput) GetPreState() [][]byte {
	if x != nil {
		return x.PreState
	}
	return nil
}

func (x *ProverInput) GetAccessList() map[string]*AccessList {
	if x != nil {
		return x.AccessList
	}
	return nil
}

type Block struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Number           uint64                 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	ParentHash       []byte                 `protobuf:"bytes,2,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	Nonce            uint64                 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	MixHash          []byte                 `protobuf:"bytes,4,opt,name=mix_hash,json=mixHash,proto3" json:"mix_hash,omitempty"`
	UncleHash        []byte                 `protobuf:"bytes,5,opt,name=uncle_hash,json=uncleHash,proto3" json:"uncle_hash,omitempty"`
	LogsBloom        []byte                 `protobuf:"bytes,6,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`
	Root             []byte                 `protobuf:"bytes,7,opt,name=root,proto3" json:"root,omitempty"`
	Miner            []byte                 `protobuf:"bytes,8,opt,name=miner,proto3" json:"miner,omitempty"`
	Difficulty       uint64                 `protobuf:"varint,9,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Extra            []byte                 `protobuf:"bytes,10,opt,name=extra,proto3" json:"extra,omitempty"`
	GasLimit         uint64                 `protobuf:"varint,11,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasUsed          uint64                 `protobuf:"varint,12,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	TxHash           []byte                 `protobuf:"bytes,13,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	ReceiptHash      []byte                 `protobuf:"bytes,14,opt,name=receipt_hash,json=receiptHash,proto3" json:"receipt_hash,omitempty"`
	Time             uint64                 `protobuf:"varint,15,opt,name=time,proto3" json:"time,omitempty"`
	TxRoot           []byte                 `protobuf:"bytes,16,opt,name=tx_root,json=txRoot,proto3" json:"tx_root,omitempty"`
	ReceiptsRoot     []byte                 `protobuf:"bytes,17,opt,name=receipts_root,json=receiptsRoot,proto3" json:"receipts_root,omitempty"`
	BaseFee          []byte                 `protobuf:"bytes,18,opt,name=base_fee,json=baseFee,proto3,oneof" json:"base_fee,omitempty"`
	WithdrawalsRoot  []byte                 `protobuf:"bytes,19,opt,name=withdrawals_root,json=withdrawalsRoot,proto3,oneof" json:"withdrawals_root,omitempty"`
	BlobGasUsed      *uint64                `protobuf:"varint,20,opt,name=blob_gas_used,json=blobGasUsed,proto3,oneof" json:"blob_gas_used,omitempty"`
	ExcessBlobGas    *uint64                `protobuf:"varint,21,opt,name=excess_blob_gas,json=excessBlobGas,proto3,oneof" json:"excess_blob_gas,omitempty"`
	ParentBeaconRoot []byte                 `protobuf:"bytes,22,opt,name=parent_beacon_root,json=parentBeaconRoot,proto3,oneof" json:"parent_beacon_root,omitempty"`
	RequestsRoot     []byte                 `protobuf:"bytes,23,opt,name=requests_root,json=requestsRoot,proto3,oneof" json:"requests_root,omitempty"`
	Hash             []byte                 `protobuf:"bytes,24,opt,name=hash,proto3" json:"hash,omitempty"`
	Transactions     []*Transaction         `protobuf:"bytes,25,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Uncles           [][]byte               `protobuf:"bytes,26,rep,name=uncles,proto3" json:"uncles,omitempty"`
	Withdrawals      []*Withdrawal          `protobuf:"bytes,27,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Block) Reset() {
	*x = Block{}
	mi := &file_src_prover_input_proto_input_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_src_prover_input_proto_input_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_src_prover_input_proto_input_proto_rawDescGZIP(), []int{1}
}

func (x *Block) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Block) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *Block) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *Block) GetMixHash() []byte {
	if x != nil {
		return x.MixHash
	}
	return nil
}

func (x *Block) GetUncleHash() []byte {
	if x != nil {
		return x.UncleHash
	}
	return nil
}

func (x *Block) GetLogsBloom() []byte {
	if x != nil {
		return x.LogsBloom
	}
	return nil
}

func (x *Block) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *Block) GetMiner() []byte {
	if x != nil {
		return x.Miner
	}
	return nil
}

func (x *Block) GetDifficulty() uint64 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *Block) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *Block) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *Block) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *Block) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Block) GetReceiptHash() []byte {
	if x != nil {
		return x.ReceiptHash
	}
	return nil
}

func (x *Block) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Block) GetTxRoot() []byte {
	if x != nil {
		return x.TxRoot
	}
	return nil
}

func (x *Block) GetReceiptsRoot() []byte {
	if x != nil {
		return x.ReceiptsRoot
	}
	return nil
}

func (x *Block) GetBaseFee() []byte {
	if x != nil {
		return x.BaseFee
	}
	return nil
}

func (x *Block) GetWithdrawalsRoot() []byte {
	if x != nil {
		return x.WithdrawalsRoot
	}
	return nil
}

func (x *Block) GetBlobGasUsed() uint64 {
	if x != nil && x.BlobGasUsed != nil {
		return *x.BlobGasUsed
	}
	return 0
}

func (x *Block) GetExcessBlobGas() uint64 {
	if x != nil && x.ExcessBlobGas != nil {
		return *x.ExcessBlobGas
	}
	return 0
}

func (x *Block) GetParentBeaconRoot() []byte {
	if x != nil {
		return x.ParentBeaconRoot
	}
	return nil
}

func (x *Block) GetRequestsRoot() []byte {
	if x != nil {
		return x.RequestsRoot
	}
	return nil
}

func (x *Block) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Block) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *Block) GetUncles() [][]byte {
	if x != nil {
		return x.Uncles
	}
	return nil
}

func (x *Block) GetWithdrawals() []*Withdrawal {
	if x != nil {
		return x.Withdrawals
	}
	return nil
}

type Transaction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to TransactionType:
	//
	//	*Transaction_LegacyTransaction
	//	*Transaction_AccessListTransaction
	//	*Transaction_DynamicFeeTransaction
	//	*Transaction_BlobTransaction
	TransactionType isTransaction_TransactionType `protobuf_oneof:"transaction_type"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_src_prover_input_proto_input_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_src_prover_input_proto_input_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_src_prover_input_proto_input_proto_rawDescGZIP(), []int{2}
}

func (x *Transaction) GetTransactionType() isTransaction_TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return nil
}

func (x *Transaction) GetLegacyTransaction() *LegacyTransaction {
	if x != nil {
		if x, ok := x.TransactionType.(*Transaction_LegacyTransaction); ok {
			return x.LegacyTransaction
		}
	}
	return nil
}

func (x *Transaction) GetAccessListTransaction() *AccessListTransaction {
	if x != nil {
		if x, ok := x.TransactionType.(*Transaction_AccessListTransaction); ok {
			return x.AccessListTransaction
		}
	}
	return nil
}

func (x *Transaction) GetDynamicFeeTransaction() *DynamicFeeTransaction {
	if x != nil {
		if x, ok := x.TransactionType.(*Transaction_DynamicFeeTransaction); ok {
			return x.DynamicFeeTransaction
		}
	}
	return nil
}

func (x *Transaction) GetBlobTransaction() *BlobTransaction {
	if x != nil {
		if x, ok := x.TransactionType.(*Transaction_BlobTransaction); ok {
			return x.BlobTransaction
		}
	}
	return nil
}

type isTransaction_TransactionType interface {
	isTransaction_TransactionType()
}

type Transaction_LegacyTransaction struct {
	LegacyTransaction *LegacyTransaction `protobuf:"bytes,1,opt,name=legacy_transaction,json=legacyTransaction,proto3,oneof"`
}

type Transaction_AccessListTransaction struct {
	AccessListTransaction *AccessListTransaction `protobuf:"bytes,2,opt,name=access_list_transaction,json=accessListTransaction,proto3,oneof"`
}

type Transaction_DynamicFeeTransaction struct {
	DynamicFeeTransaction *DynamicFeeTransaction `protobuf:"bytes,3,opt,name=dynamic_fee_transaction,json=dynamicFeeTransaction,proto3,oneof"`
}

type Transaction_BlobTransaction struct {
	BlobTransaction *BlobTransaction `protobuf:"bytes,4,opt,name=blob_transaction,json=blobTransaction,proto3,oneof"`
}

func (*Transaction_LegacyTransaction) isTransaction_TransactionType() {}

func (*Transaction_AccessListTransaction) isTransaction_TransactionType() {}

func (*Transaction_DynamicFeeTransaction) isTransaction_TransactionType() {}

func (*Transaction_BlobTransaction) isTransaction_TransactionType() {}

type Withdrawal struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Index          uint64                 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	ValidatorIndex uint64                 `protobuf:"varint,2,opt,name=validator_index,json=validatorIndex,proto3" json:"validator_index,omitempty"`
	Address        []byte                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Amount         uint64                 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Withdrawal) Reset() {
	*x = Withdrawal{}
	mi := &file_src_prover_input_proto_input_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Withdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Withdrawal) ProtoMessage() {}

func (x *Withdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_src_prover_input_proto_input_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Withdrawal.ProtoReflect.Descriptor instead.
func (*Withdrawal) Descriptor() ([]byte, []int) {
	return file_src_prover_input_proto_input_proto_rawDescGZIP(), []int{3}
}

func (x *Withdrawal) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Withdrawal) GetValidatorIndex() uint64 {
	if x != nil {
		return x.ValidatorIndex
	}
	return 0
}

func (x *Withdrawal) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Withdrawal) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type AncestorHeader struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ParentHash       []byte                 `protobuf:"bytes,1,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	UncleHash        []byte                 `protobuf:"bytes,2,opt,name=uncle_hash,json=uncleHash,proto3" json:"uncle_hash,omitempty"`
	Coinbase         []byte                 `protobuf:"bytes,3,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	Root             []byte                 `protobuf:"bytes,4,opt,name=root,proto3" json:"root,omitempty"`
	TxHash           []byte                 `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	ReceiptHash      []byte                 `protobuf:"bytes,6,opt,name=receipt_hash,json=receiptHash,proto3" json:"receipt_hash,omitempty"`
	Bloom            []byte                 `protobuf:"bytes,7,opt,name=bloom,proto3" json:"bloom,omitempty"`
	Difficulty       uint64                 `protobuf:"varint,8,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Number           uint64                 `protobuf:"varint,9,opt,name=number,proto3" json:"number,omitempty"`
	GasLimit         uint64                 `protobuf:"varint,10,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasUsed          uint64                 `protobuf:"varint,11,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Time             uint64                 `protobuf:"varint,12,opt,name=time,proto3" json:"time,omitempty"`
	Extra            []byte                 `protobuf:"bytes,13,opt,name=extra,proto3" json:"extra,omitempty"`
	MixDigest        []byte                 `protobuf:"bytes,14,opt,name=mix_digest,json=mixDigest,proto3" json:"mix_digest,omitempty"`
	Nonce            []byte                 `protobuf:"bytes,15,opt,name=nonce,proto3" json:"nonce,omitempty"`
	BaseFee          []byte                 `protobuf:"bytes,16,opt,name=base_fee,json=baseFee,proto3,oneof" json:"base_fee,omitempty"`
	WithdrawalsHash  []byte                 `protobuf:"bytes,17,opt,name=withdrawals_hash,json=withdrawalsHash,proto3,oneof" json:"withdrawals_hash,omitempty"`
	BlobGasUsed      *uint64                `protobuf:"varint,18,opt,name=blob_gas_used,json=blobGasUsed,proto3,oneof" json:"blob_gas_used,omitempty"`
	ExcessBlobGas    *uint64                `protobuf:"varint,19,opt,name=excess_blob_gas,json=excessBlobGas,proto3,oneof" json:"excess_blob_gas,omitempty"`
	ParentBeaconRoot []byte                 `protobuf:"bytes,20,opt,name=parent_beacon_root,json=parentBeaconRoot,proto3,oneof" json:"parent_beacon_root,omitempty"`
	RequestsHash     []byte                 `protobuf:"bytes,21,opt,name=requests_hash,json=requestsHash,proto3,oneof" json:"requests_hash,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AncestorHeader) Reset() {
	*x = AncestorHeader{}
	mi := &file_src_prover_input_proto_input_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AncestorHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AncestorHeader) ProtoMessage() {}

func (x *AncestorHeader) ProtoReflect() protoreflect.Message {
	mi := &file_src_prover_input_proto_input_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AncestorHeader.ProtoReflect.Descriptor instead.
func (*AncestorHeader) Descriptor() ([]byte, []int) {
	return file_src_prover_input_proto_input_proto_rawDescGZIP(), []int{4}
}

func (x *AncestorHeader) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *AncestorHeader) GetUncleHash() []byte {
	if x != nil {
		return x.UncleHash
	}
	return nil
}

func (x *AncestorHeader) GetCoinbase() []byte {
	if x != nil {
		return x.Coinbase
	}
	return nil
}

func (x *AncestorHeader) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *AncestorHeader) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *AncestorHeader) GetReceiptHash() []byte {
	if x != nil {
		return x.ReceiptHash
	}
	return nil
}

func (x *AncestorHeader) GetBloom() []byte {
	if x != nil {
		return x.Bloom
	}
	return nil
}

func (x *AncestorHeader) GetDifficulty() uint64 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *AncestorHeader) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *AncestorHeader) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *AncestorHeader) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *AncestorHeader) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AncestorHeader) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *AncestorHeader) GetMixDigest() []byte {
	if x != nil {
		return x.MixDigest
	}
	return nil
}

func (x *AncestorHeader) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *AncestorHeader) GetBaseFee() []byte {
	if x != nil {
		return x.BaseFee
	}
	return nil
}

func (x *AncestorHeader) GetWithdrawalsHash() []byte {
	if x != nil {
		return x.WithdrawalsHash
	}
	return nil
}

func (x *AncestorHeader) GetBlobGasUsed() uint64 {
	if x != nil && x.BlobGasUsed != nil {
		return *x.BlobGasUsed
	}
	return 0
}

func (x *AncestorHeader) GetExcessBlobGas() uint64 {
	if x != nil && x.ExcessBlobGas != nil {
		return *x.ExcessBlobGas
	}
	return 0
}

func (x *AncestorHeader) GetParentBeaconRoot() []byte {
	if x != nil {
		return x.ParentBeaconRoot
	}
	return nil
}

func (x *AncestorHeader) GetRequestsHash() []byte {
	if x != nil {
		return x.RequestsHash
	}
	return nil
}

type LegacyTransaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nonce         uint64                 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	GasPrice      []byte                 `protobuf:"bytes,2,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	Gas           uint64                 `protobuf:"varint,3,opt,name=gas,proto3" json:"gas,omitempty"`
	To            []byte                 `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Value         []byte                 `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Data          []byte                 `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	V             []byte                 `protobuf:"bytes,7,opt,name=v,proto3" json:"v,omitempty"`
	R             []byte                 `protobuf:"bytes,8,opt,name=r,proto3" json:"r,omitempty"`
	S             []byte                 `protobuf:"bytes,9,opt,name=s,proto3" json:"s,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LegacyTransaction) Reset() {
	*x = LegacyTransaction{}
	mi := &file_src_prover_input_proto_input_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyTransaction) ProtoMessage() {}

func (x *LegacyTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_src_prover_input_proto_input_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyTransaction.ProtoReflect.Descriptor instead.
func (*LegacyTransaction) Descriptor() ([]byte, []int) {
	return file_src_prover_input_proto_input_proto_rawDescGZIP(), []int{5}
}

func (x *LegacyTransaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *LegacyTransaction) GetGasPrice() []byte {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

func (x *LegacyTransaction) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *LegacyTransaction) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *LegacyTransaction) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *LegacyTransaction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LegacyTransaction) GetV() []byte {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *LegacyTransaction) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *LegacyTransaction) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

type AccessListTransaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainId       uint64                 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce         uint64                 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	GasPrice      []byte                 `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	Gas           uint64                 `protobuf:"varint,4,opt,name=gas,proto3" json:"gas,omitempty"`
	To            []byte                 `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	Value         []byte                 `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	Data          []byte                 `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	AccessList    []*AccessTuple         `protobuf:"bytes,8,rep,name=access_list,json=accessList,proto3" json:"access_list,omitempty"`
	V             []byte                 `protobuf:"bytes,9,opt,name=v,proto3" json:"v,omitempty"`
	R             []byte                 `protobuf:"bytes,10,opt,name=r,proto3" json:"r,omitempty"`
	S             []byte                 `protobuf:"bytes,11,opt,name=s,proto3" json:"s,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessListTransaction) Reset() {
	*x = AccessListTransaction{}
	mi := &file_src_prover_input_proto_input_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessListTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessListTransaction) ProtoMessage() {}

func (x *AccessListTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_src_prover_input_proto_input_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessListTransaction.ProtoReflect.Descriptor instead.
func (*AccessListTransaction) Descriptor() ([]byte, []int) {
	return file_src_prover_input_proto_input_proto_rawDescGZIP(), []int{6}
}

func (x *AccessListTransaction) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *AccessListTransaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *AccessListTransaction) GetGasPrice() []byte {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

func (x *AccessListTransaction) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *AccessListTransaction) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *AccessListTransaction) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AccessListTransaction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AccessListTransaction) GetAccessList() []*AccessTuple {
	if x != nil {
		return x.AccessList
	}
	return nil
}

func (x *AccessListTransaction) GetV() []byte {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *AccessListTransaction) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *AccessListTransaction) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

type DynamicFeeTransaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainId       uint64                 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce         uint64                 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	GasTipCap     []byte                 `protobuf:"bytes,3,opt,name=gas_tip_cap,json=gasTipCap,proto3" json:"gas_tip_cap,omitempty"`
	GasFeeCap     []byte                 `protobuf:"bytes,4,opt,name=gas_fee_cap,json=gasFeeCap,proto3" json:"gas_fee_cap,omitempty"`
	Gas           uint64                 `protobuf:"varint,5,opt,name=gas,proto3" json:"gas,omitempty"`
	To            []byte                 `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	Value         []byte                 `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	Data          []byte                 `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	AccessList    []*AccessTuple         `protobuf:"bytes,9,rep,name=access_list,json=accessList,proto3" json:"access_list,omitempty"`
	V             []byte                 `protobuf:"bytes,10,opt,name=v,proto3" json:"v,omitempty"`
	R             []byte                 `protobuf:"bytes,11,opt,name=r,proto3" json:"r,omitempty"`
	S             []byte                 `protobuf:"bytes,12,opt,name=s,proto3" json:"s,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DynamicFeeTransaction) Reset() {
	*x = DynamicFeeTransaction{}
	mi := &file_src_prover_input_proto_input_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamicFeeTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicFeeTransaction) ProtoMessage() {}

func (x *DynamicFeeTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_src_prover_input_proto_input_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicFeeTransaction.ProtoReflect.Descriptor instead.
func (*DynamicFeeTransaction) Descriptor() ([]byte, []int) {
	return file_src_prover_input_proto_input_proto_rawDescGZIP(), []int{7}
}

func (x *DynamicFeeTransaction) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *DynamicFeeTransaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *DynamicFeeTransaction) GetGasTipCap() []byte {
	if x != nil {
		return x.GasTipCap
	}
	return nil
}

func (x *DynamicFeeTransaction) GetGasFeeCap() []byte {
	if x != nil {
		return x.GasFeeCap
	}
	return nil
}

func (x *DynamicFeeTransaction) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *DynamicFeeTransaction) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *DynamicFeeTransaction) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DynamicFeeTransaction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DynamicFeeTransaction) GetAccessList() []*AccessTuple {
	if x != nil {
		return x.AccessList
	}
	return nil
}

func (x *DynamicFeeTransaction) GetV() []byte {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *DynamicFeeTransaction) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *DynamicFeeTransaction) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

type BlobTransaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainId       uint64                 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce         uint64                 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	GasTipCap     []byte                 `protobuf:"bytes,3,opt,name=gas_tip_cap,json=gasTipCap,proto3" json:"gas_tip_cap,omitempty"`
	GasFeeCap     []byte                 `protobuf:"bytes,4,opt,name=gas_fee_cap,json=gasFeeCap,proto3" json:"gas_fee_cap,omitempty"`
	Gas           uint64                 `protobuf:"varint,5,opt,name=gas,proto3" json:"gas,omitempty"`
	To            []byte                 `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	Value         []byte                 `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	Data          []byte                 `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	AccessList    []*AccessTuple         `protobuf:"bytes,9,rep,name=access_list,json=accessList,proto3" json:"access_list,omitempty"`
	BlobFeeCap    []byte                 `protobuf:"bytes,10,opt,name=blob_fee_cap,json=blobFeeCap,proto3" json:"blob_fee_cap,omitempty"`
	BlobHashes    [][]byte               `protobuf:"bytes,11,rep,name=blob_hashes,json=blobHashes,proto3" json:"blob_hashes,omitempty"`
	V             []byte                 `protobuf:"bytes,12,opt,name=v,proto3" json:"v,omitempty"`
	R             []byte                 `protobuf:"bytes,13,opt,name=r,proto3" json:"r,omitempty"`
	S             []byte                 `protobuf:"bytes,14,opt,name=s,proto3" json:"s,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlobTransaction) Reset() {
	*x = BlobTransaction{}
	mi := &file_src_prover_input_proto_input_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlobTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobTransaction) ProtoMessage() {}

func (x *BlobTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_src_prover_input_proto_input_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobTransaction.ProtoReflect.Descriptor instead.
func (*BlobTransaction) Descriptor() ([]byte, []int) {
	return file_src_prover_input_proto_input_proto_rawDescGZIP(), []int{8}
}

func (x *BlobTransaction) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *BlobTransaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *BlobTransaction) GetGasTipCap() []byte {
	if x != nil {
		return x.GasTipCap
	}
	return nil
}

func (x *BlobTransaction) GetGasFeeCap() []byte {
	if x != nil {
		return x.GasFeeCap
	}
	return nil
}

func (x *BlobTransaction) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *BlobTransaction) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *BlobTransaction) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *BlobTransaction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BlobTransaction) GetAccessList() []*AccessTuple {
	if x != nil {
		return x.AccessList
	}
	return nil
}

func (x *BlobTransaction) GetBlobFeeCap() []byte {
	if x != nil {
		return x.BlobFeeCap
	}
	return nil
}

func (x *BlobTransaction) GetBlobHashes() [][]byte {
	if x != nil {
		return x.BlobHashes
	}
	return nil
}

func (x *BlobTransaction) GetV() []byte {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *BlobTransaction) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *BlobTransaction) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

type AccessTuple struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       []byte                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	StorageKeys   [][]byte               `protobuf:"bytes,2,rep,name=storage_keys,json=storageKeys,proto3" json:"storage_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessTuple) Reset() {
	*x = AccessTuple{}
	mi := &file_src_prover_input_proto_input_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessTuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessTuple) ProtoMessage() {}

func (x *AccessTuple) ProtoReflect() protoreflect.Message {
	mi := &file_src_prover_input_proto_input_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessTuple.ProtoReflect.Descriptor instead.
func (*AccessTuple) Descriptor() ([]byte, []int) {
	return file_src_prover_input_proto_input_proto_rawDescGZIP(), []int{9}
}

func (x *AccessTuple) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AccessTuple) GetStorageKeys() [][]byte {
	if x != nil {
		return x.StorageKeys
	}
	return nil
}

type AccessList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StorageSlots  [][]byte               `protobuf:"bytes,1,rep,name=storage_slots,json=storageSlots,proto3" json:"storage_slots,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessList) Reset() {
	*x = AccessList{}
	mi := &file_src_prover_input_proto_input_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessList) ProtoMessage() {}

func (x *AccessList) ProtoReflect() protoreflect.Message {
	mi := &file_src_prover_input_proto_input_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessList.ProtoReflect.Descriptor instead.
func (*AccessList) Descriptor() ([]byte, []int) {
	return file_src_prover_input_proto_input_proto_rawDescGZIP(), []int{10}
}

func (x *AccessList) GetStorageSlots() [][]byte {
	if x != nil {
		return x.StorageSlots
	}
	return nil
}

type ChainConfig struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ChainId                 uint64                 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	HomesteadBlock          []byte                 `protobuf:"bytes,2,opt,name=homestead_block,json=homesteadBlock,proto3,oneof" json:"homestead_block,omitempty"`
	DaoForkBlock            []byte                 `protobuf:"bytes,3,opt,name=dao_fork_block,json=daoForkBlock,proto3,oneof" json:"dao_fork_block,omitempty"`
	DaoForkSupport          *bool                  `protobuf:"varint,4,opt,name=dao_fork_support,json=daoForkSupport,proto3,oneof" json:"dao_fork_support,omitempty"`
	Eip150Block             []byte                 `protobuf:"bytes,5,opt,name=eip150_block,json=eip150Block,proto3,oneof" json:"eip150_block,omitempty"`
	Eip155Block             []byte                 `protobuf:"bytes,6,opt,name=eip155_block,json=eip155Block,proto3,oneof" json:"eip155_block,omitempty"`
	Eip158Block             []byte                 `protobuf:"bytes,7,opt,name=eip158_block,json=eip158Block,proto3,oneof" json:"eip158_block,omitempty"`
	ByzantiumBlock          []byte                 `protobuf:"bytes,8,opt,name=byzantium_block,json=byzantiumBlock,proto3,oneof" json:"byzantium_block,omitempty"`
	ConstantinopleBlock     []byte                 `protobuf:"bytes,9,opt,name=constantinople_block,json=constantinopleBlock,proto3,oneof" json:"constantinople_block,omitempty"`
	PetersburgBlock         []byte                 `protobuf:"bytes,10,opt,name=petersburg_block,json=petersburgBlock,proto3,oneof" json:"petersburg_block,omitempty"`
	IstanbulBlock           []byte                 `protobuf:"bytes,11,opt,name=istanbul_block,json=istanbulBlock,proto3,oneof" json:"istanbul_block,omitempty"`
	MuirGlacierBlock        []byte                 `protobuf:"bytes,12,opt,name=muir_glacier_block,json=muirGlacierBlock,proto3,oneof" json:"muir_glacier_block,omitempty"`
	BerlinBlock             []byte                 `protobuf:"bytes,13,opt,name=berlin_block,json=berlinBlock,proto3,oneof" json:"berlin_block,omitempty"`
	LondonBlock             []byte                 `protobuf:"bytes,14,opt,name=london_block,json=londonBlock,proto3,oneof" json:"london_block,omitempty"`
	ArrowGlacierBlock       []byte                 `protobuf:"bytes,15,opt,name=arrow_glacier_block,json=arrowGlacierBlock,proto3,oneof" json:"arrow_glacier_block,omitempty"`
	GrayGlacierBlock        []byte                 `protobuf:"bytes,16,opt,name=gray_glacier_block,json=grayGlacierBlock,proto3,oneof" json:"gray_glacier_block,omitempty"`
	MergeNetsplitBlock      []byte                 `protobuf:"bytes,17,opt,name=merge_netsplit_block,json=mergeNetsplitBlock,proto3,oneof" json:"merge_netsplit_block,omitempty"`
	ShanghaiTime            *uint64                `protobuf:"varint,18,opt,name=shanghai_time,json=shanghaiTime,proto3,oneof" json:"shanghai_time,omitempty"`
	CancunTime              *uint64                `protobuf:"varint,19,opt,name=cancun_time,json=cancunTime,proto3,oneof" json:"cancun_time,omitempty"`
	PragueTime              *uint64                `protobuf:"varint,20,opt,name=prague_time,json=pragueTime,proto3,oneof" json:"prague_time,omitempty"`
	VerkleTime              *uint64                `protobuf:"varint,21,opt,name=verkle_time,json=verkleTime,proto3,oneof" json:"verkle_time,omitempty"`
	TerminalTotalDifficulty []byte                 `protobuf:"bytes,22,opt,name=terminal_total_difficulty,json=terminalTotalDifficulty,proto3,oneof" json:"terminal_total_difficulty,omitempty"`
	DepositContractAddress  []byte                 `protobuf:"bytes,23,opt,name=deposit_contract_address,json=depositContractAddress,proto3,oneof" json:"deposit_contract_address,omitempty"`
	Ethash                  []byte                 `protobuf:"bytes,24,opt,name=ethash,proto3,oneof" json:"ethash,omitempty"`
	Clique                  []byte                 `protobuf:"bytes,25,opt,name=clique,proto3,oneof" json:"clique,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ChainConfig) Reset() {
	*x = ChainConfig{}
	mi := &file_src_prover_input_proto_input_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainConfig) ProtoMessage() {}

func (x *ChainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_src_prover_input_proto_input_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainConfig.ProtoReflect.Descriptor instead.
func (*ChainConfig) Descriptor() ([]byte, []int) {
	return file_src_prover_input_proto_input_proto_rawDescGZIP(), []int{11}
}

func (x *ChainConfig) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *ChainConfig) GetHomesteadBlock() []byte {
	if x != nil {
		return x.HomesteadBlock
	}
	return nil
}

func (x *ChainConfig) GetDaoForkBlock() []byte {
	if x != nil {
		return x.DaoForkBlock
	}
	return nil
}

func (x *ChainConfig) GetDaoForkSupport() bool {
	if x != nil && x.DaoForkSupport != nil {
		return *x.DaoForkSupport
	}
	return false
}

func (x *ChainConfig) GetEip150Block() []byte {
	if x != nil {
		return x.Eip150Block
	}
	return nil
}

func (x *ChainConfig) GetEip155Block() []byte {
	if x != nil {
		return x.Eip155Block
	}
	return nil
}

func (x *ChainConfig) GetEip158Block() []byte {
	if x != nil {
		return x.Eip158Block
	}
	return nil
}

func (x *ChainConfig) GetByzantiumBlock() []byte {
	if x != nil {
		return x.ByzantiumBlock
	}
	return nil
}

func (x *ChainConfig) GetConstantinopleBlock() []byte {
	if x != nil {
		return x.ConstantinopleBlock
	}
	return nil
}

func (x *ChainConfig) GetPetersburgBlock() []byte {
	if x != nil {
		return x.PetersburgBlock
	}
	return nil
}

func (x *ChainConfig) GetIstanbulBlock() []byte {
	if x != nil {
		return x.IstanbulBlock
	}
	return nil
}

func (x *ChainConfig) GetMuirGlacierBlock() []byte {
	if x != nil {
		return x.MuirGlacierBlock
	}
	return nil
}

func (x *ChainConfig) GetBerlinBlock() []byte {
	if x != nil {
		return x.BerlinBlock
	}
	return nil
}

func (x *ChainConfig) GetLondonBlock() []byte {
	if x != nil {
		return x.LondonBlock
	}
	return nil
}

func (x *ChainConfig) GetArrowGlacierBlock() []byte {
	if x != nil {
		return x.ArrowGlacierBlock
	}
	return nil
}

func (x *ChainConfig) GetGrayGlacierBlock() []byte {
	if x != nil {
		return x.GrayGlacierBlock
	}
	return nil
}

func (x *ChainConfig) GetMergeNetsplitBlock() []byte {
	if x != nil {
		return x.MergeNetsplitBlock
	}
	return nil
}

func (x *ChainConfig) GetShanghaiTime() uint64 {
	if x != nil && x.ShanghaiTime != nil {
		return *x.ShanghaiTime
	}
	return 0
}

func (x *ChainConfig) GetCancunTime() uint64 {
	if x != nil && x.CancunTime != nil {
		return *x.CancunTime
	}
	return 0
}

func (x *ChainConfig) GetPragueTime() uint64 {
	if x != nil && x.PragueTime != nil {
		return *x.PragueTime
	}
	return 0
}

func (x *ChainConfig) GetVerkleTime() uint64 {
	if x != nil && x.VerkleTime != nil {
		return *x.VerkleTime
	}
	return 0
}

func (x *ChainConfig) GetTerminalTotalDifficulty() []byte {
	if x != nil {
		return x.TerminalTotalDifficulty
	}
	return nil
}

func (x *ChainConfig) GetDepositContractAddress() []byte {
	if x != nil {
		return x.DepositContractAddress
	}
	return nil
}

func (x *ChainConfig) GetEthash() []byte {
	if x != nil {
		return x.Ethash
	}
	return nil
}

func (x *ChainConfig) GetClique() []byte {
	if x != nil {
		return x.Clique
	}
	return nil
}

var File_src_prover_input_proto_input_proto protoreflect.FileDescriptor

var file_src_prover_input_proto_input_proto_rawDesc = []byte{
	0x0a, 0x22, 0x73, 0x72, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7, 0x02, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x33, 0x0a, 0x09, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x63, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x09, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0x50, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe2, 0x07, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x69, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x6d, 0x69, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x63,
	0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x75,
	0x6e, 0x63, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x73,
	0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x73, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x69, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x74, 0x78, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1e, 0x0a,
	0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0d, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x55,
	0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x03, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x04, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52,
	0x6f, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x75, 0x6e,
	0x63, 0x6c, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x0b, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x67, 0x61,
	0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0xe1, 0x02, 0x0a, 0x0b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x12, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a,
	0x17, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x65,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x65, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x62, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7d,
	0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x95, 0x06,
	0x0a, 0x0e, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c, 0x6f,
	0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61,
	0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67,
	0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x69, 0x78, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x6d, 0x69, 0x78, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x62,
	0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x65, 0x78,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f,
	0x62, 0x47, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x04, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65,
	0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f,
	0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x78, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x67, 0x61, 0x73, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x22, 0xbc, 0x01, 0x0a, 0x11, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x61, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x76, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x01, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x67, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x61, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x0a,
	0x01, 0x76, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x76, 0x12, 0x0c, 0x0a, 0x01, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x73, 0x22, 0xb3, 0x02, 0x0a, 0x15, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x46, 0x65, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x74, 0x69, 0x70, 0x5f, 0x63, 0x61,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x61, 0x73, 0x54, 0x69, 0x70, 0x43,
	0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x61,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x61, 0x73, 0x46, 0x65, 0x65, 0x43,
	0x61, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x67, 0x61, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01,
	0x76, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x72, 0x12,
	0x0c, 0x0a, 0x01, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x73, 0x22, 0xf0, 0x02,
	0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x74, 0x69, 0x70, 0x5f, 0x63, 0x61,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x61, 0x73, 0x54, 0x69, 0x70, 0x43,
	0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x61,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x61, 0x73, 0x46, 0x65, 0x65, 0x43,
	0x61, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x67, 0x61, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x63, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x46,
	0x65, 0x65, 0x43, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x62,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x01, 0x76, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x73,
	0x22, 0x4a, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x31, 0x0a, 0x0a,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x22,
	0xba, 0x0c, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0f, 0x68, 0x6f,
	0x6d, 0x65, 0x73, 0x74, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0e, 0x68, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x61, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x64, 0x61, 0x6f, 0x5f,
	0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x01, 0x52, 0x0c, 0x64, 0x61, 0x6f, 0x46, 0x6f, 0x72, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x61, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52,
	0x0e, 0x64, 0x61, 0x6f, 0x46, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x65, 0x69, 0x70, 0x31, 0x35, 0x30, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x0b, 0x65, 0x69, 0x70, 0x31,
	0x35, 0x30, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x65, 0x69,
	0x70, 0x31, 0x35, 0x35, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x04, 0x52, 0x0b, 0x65, 0x69, 0x70, 0x31, 0x35, 0x35, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x65, 0x69, 0x70, 0x31, 0x35, 0x38, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52, 0x0b, 0x65, 0x69, 0x70, 0x31,
	0x35, 0x38, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x62, 0x79,
	0x7a, 0x61, 0x6e, 0x74, 0x69, 0x75, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x0e, 0x62, 0x79, 0x7a, 0x61, 0x6e, 0x74, 0x69, 0x75, 0x6d,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x07, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x70, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x10, 0x70, 0x65, 0x74, 0x65, 0x72, 0x73, 0x62, 0x75, 0x72, 0x67, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x08, 0x52, 0x0f, 0x70, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x62, 0x75, 0x72, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x62, 0x75, 0x6c, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x62, 0x75, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12,
	0x6d, 0x75, 0x69, 0x72, 0x5f, 0x67, 0x6c, 0x61, 0x63, 0x69, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0a, 0x52, 0x10, 0x6d, 0x75, 0x69, 0x72,
	0x47, 0x6c, 0x61, 0x63, 0x69, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x62, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0b, 0x52, 0x0b, 0x62, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x6f, 0x6e, 0x64, 0x6f,
	0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0c, 0x52,
	0x0b, 0x6c, 0x6f, 0x6e, 0x64, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x13, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x67, 0x6c, 0x61, 0x63, 0x69, 0x65, 0x72,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0d, 0x52, 0x11,
	0x61, 0x72, 0x72, 0x6f, 0x77, 0x47, 0x6c, 0x61, 0x63, 0x69, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x67, 0x72, 0x61, 0x79, 0x5f, 0x67, 0x6c, 0x61,
	0x63, 0x69, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x0e, 0x52, 0x10, 0x67, 0x72, 0x61, 0x79, 0x47, 0x6c, 0x61, 0x63, 0x69, 0x65, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x5f, 0x6e, 0x65, 0x74, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0f, 0x52, 0x12, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4e, 0x65,
	0x74, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x73, 0x68, 0x61, 0x6e, 0x67, 0x68, 0x61, 0x69, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x04, 0x48, 0x10, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x6e, 0x67, 0x68, 0x61,
	0x69, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63,
	0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x48, 0x11, 0x52,
	0x0a, 0x63, 0x61, 0x6e, 0x63, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x70, 0x72, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x12, 0x52, 0x0a, 0x70, 0x72, 0x61, 0x67, 0x75, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x48, 0x13, 0x52, 0x0a, 0x76, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x19, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x14, 0x52,
	0x17, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x18, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x15, 0x52,
	0x16, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x74,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x16, 0x52, 0x06, 0x65, 0x74,
	0x68, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x71, 0x75,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x17, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x71, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x65,
	0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x61, 0x6f,
	0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x64, 0x61, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x69, 0x70, 0x31, 0x35, 0x30, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x69, 0x70, 0x31, 0x35, 0x35, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x69, 0x70, 0x31, 0x35, 0x38, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x62, 0x79, 0x7a, 0x61, 0x6e, 0x74, 0x69, 0x75,
	0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x65, 0x74, 0x65, 0x72, 0x73, 0x62, 0x75, 0x72, 0x67, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x62,
	0x75, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d, 0x75, 0x69,
	0x72, 0x5f, 0x67, 0x6c, 0x61, 0x63, 0x69, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x6e, 0x64, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x67, 0x6c, 0x61, 0x63,
	0x69, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x67, 0x72,
	0x61, 0x79, 0x5f, 0x67, 0x6c, 0x61, 0x63, 0x69, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x68,
	0x61, 0x6e, 0x67, 0x68, 0x61, 0x69, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x61, 0x6e, 0x63, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x70, 0x72, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x76, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x74, 0x68, 0x61, 0x73,
	0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6c, 0x69, 0x71, 0x75, 0x65, 0x42, 0x34, 0x5a, 0x32,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x6b, 0x72, 0x74, 0x2d,
	0x6c, 0x61, 0x62, 0x73, 0x2f, 0x7a, 0x6b, 0x2d, 0x70, 0x69, 0x67, 0x2f, 0x73, 0x72, 0x63, 0x2f,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_prover_input_proto_input_proto_rawDescOnce sync.Once
	file_src_prover_input_proto_input_proto_rawDescData = file_src_prover_input_proto_input_proto_rawDesc
)

func file_src_prover_input_proto_input_proto_rawDescGZIP() []byte {
	file_src_prover_input_proto_input_proto_rawDescOnce.Do(func() {
		file_src_prover_input_proto_input_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_prover_input_proto_input_proto_rawDescData)
	})
	return file_src_prover_input_proto_input_proto_rawDescData
}

var file_src_prover_input_proto_input_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_src_prover_input_proto_input_proto_goTypes = []any{
	(*ProverInput)(nil),           // 0: proto.ProverInput
	(*Block)(nil),                 // 1: proto.Block
	(*Transaction)(nil),           // 2: proto.Transaction
	(*Withdrawal)(nil),            // 3: proto.Withdrawal
	(*AncestorHeader)(nil),        // 4: proto.AncestorHeader
	(*LegacyTransaction)(nil),     // 5: proto.LegacyTransaction
	(*AccessListTransaction)(nil), // 6: proto.AccessListTransaction
	(*DynamicFeeTransaction)(nil), // 7: proto.DynamicFeeTransaction
	(*BlobTransaction)(nil),       // 8: proto.BlobTransaction
	(*AccessTuple)(nil),           // 9: proto.AccessTuple
	(*AccessList)(nil),            // 10: proto.AccessList
	(*ChainConfig)(nil),           // 11: proto.ChainConfig
	nil,                           // 12: proto.ProverInput.AccessListEntry
}
var file_src_prover_input_proto_input_proto_depIdxs = []int32{
	1,  // 0: proto.ProverInput.block:type_name -> proto.Block
	4,  // 1: proto.ProverInput.ancestors:type_name -> proto.AncestorHeader
	11, // 2: proto.ProverInput.chain_config:type_name -> proto.ChainConfig
	12, // 3: proto.ProverInput.access_list:type_name -> proto.ProverInput.AccessListEntry
	2,  // 4: proto.Block.transactions:type_name -> proto.Transaction
	3,  // 5: proto.Block.withdrawals:type_name -> proto.Withdrawal
	5,  // 6: proto.Transaction.legacy_transaction:type_name -> proto.LegacyTransaction
	6,  // 7: proto.Transaction.access_list_transaction:type_name -> proto.AccessListTransaction
	7,  // 8: proto.Transaction.dynamic_fee_transaction:type_name -> proto.DynamicFeeTransaction
	8,  // 9: proto.Transaction.blob_transaction:type_name -> proto.BlobTransaction
	9,  // 10: proto.AccessListTransaction.access_list:type_name -> proto.AccessTuple
	9,  // 11: proto.DynamicFeeTransaction.access_list:type_name -> proto.AccessTuple
	9,  // 12: proto.BlobTransaction.access_list:type_name -> proto.AccessTuple
	10, // 13: proto.ProverInput.AccessListEntry.value:type_name -> proto.AccessList
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_src_prover_input_proto_input_proto_init() }
func file_src_prover_input_proto_input_proto_init() {
	if File_src_prover_input_proto_input_proto != nil {
		return
	}
	file_src_prover_input_proto_input_proto_msgTypes[1].OneofWrappers = []any{}
	file_src_prover_input_proto_input_proto_msgTypes[2].OneofWrappers = []any{
		(*Transaction_LegacyTransaction)(nil),
		(*Transaction_AccessListTransaction)(nil),
		(*Transaction_DynamicFeeTransaction)(nil),
		(*Transaction_BlobTransaction)(nil),
	}
	file_src_prover_input_proto_input_proto_msgTypes[4].OneofWrappers = []any{}
	file_src_prover_input_proto_input_proto_msgTypes[11].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_prover_input_proto_input_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_src_prover_input_proto_input_proto_goTypes,
		DependencyIndexes: file_src_prover_input_proto_input_proto_depIdxs,
		MessageInfos:      file_src_prover_input_proto_input_proto_msgTypes,
	}.Build()
	File_src_prover_input_proto_input_proto = out.File
	file_src_prover_input_proto_input_proto_rawDesc = nil
	file_src_prover_input_proto_input_proto_goTypes = nil
	file_src_prover_input_proto_input_proto_depIdxs = nil
}
