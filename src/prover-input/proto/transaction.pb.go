// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: src/prover-input/proto/transaction.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Transaction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to TransactionType:
	//
	//	*Transaction_LegacyTransaction
	//	*Transaction_AccessListTransaction
	//	*Transaction_DynamicFeeTransaction
	//	*Transaction_BlobTransaction
	TransactionType isTransaction_TransactionType `protobuf_oneof:"transaction_type"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_src_prover_input_proto_transaction_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_src_prover_input_proto_transaction_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_src_prover_input_proto_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *Transaction) GetTransactionType() isTransaction_TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return nil
}

func (x *Transaction) GetLegacyTransaction() *LegacyTransaction {
	if x != nil {
		if x, ok := x.TransactionType.(*Transaction_LegacyTransaction); ok {
			return x.LegacyTransaction
		}
	}
	return nil
}

func (x *Transaction) GetAccessListTransaction() *AccessListTransaction {
	if x != nil {
		if x, ok := x.TransactionType.(*Transaction_AccessListTransaction); ok {
			return x.AccessListTransaction
		}
	}
	return nil
}

func (x *Transaction) GetDynamicFeeTransaction() *DynamicFeeTransaction {
	if x != nil {
		if x, ok := x.TransactionType.(*Transaction_DynamicFeeTransaction); ok {
			return x.DynamicFeeTransaction
		}
	}
	return nil
}

func (x *Transaction) GetBlobTransaction() *BlobTransaction {
	if x != nil {
		if x, ok := x.TransactionType.(*Transaction_BlobTransaction); ok {
			return x.BlobTransaction
		}
	}
	return nil
}

type isTransaction_TransactionType interface {
	isTransaction_TransactionType()
}

type Transaction_LegacyTransaction struct {
	LegacyTransaction *LegacyTransaction `protobuf:"bytes,1,opt,name=legacy_transaction,json=legacyTransaction,proto3,oneof"`
}

type Transaction_AccessListTransaction struct {
	AccessListTransaction *AccessListTransaction `protobuf:"bytes,2,opt,name=access_list_transaction,json=accessListTransaction,proto3,oneof"`
}

type Transaction_DynamicFeeTransaction struct {
	DynamicFeeTransaction *DynamicFeeTransaction `protobuf:"bytes,3,opt,name=dynamic_fee_transaction,json=dynamicFeeTransaction,proto3,oneof"`
}

type Transaction_BlobTransaction struct {
	BlobTransaction *BlobTransaction `protobuf:"bytes,4,opt,name=blob_transaction,json=blobTransaction,proto3,oneof"`
}

func (*Transaction_LegacyTransaction) isTransaction_TransactionType() {}

func (*Transaction_AccessListTransaction) isTransaction_TransactionType() {}

func (*Transaction_DynamicFeeTransaction) isTransaction_TransactionType() {}

func (*Transaction_BlobTransaction) isTransaction_TransactionType() {}

type LegacyTransaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nonce         uint64                 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	GasPrice      []byte                 `protobuf:"bytes,2,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	Gas           uint64                 `protobuf:"varint,3,opt,name=gas,proto3" json:"gas,omitempty"`
	To            []byte                 `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Value         []byte                 `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Data          []byte                 `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	V             []byte                 `protobuf:"bytes,7,opt,name=v,proto3" json:"v,omitempty"`
	R             []byte                 `protobuf:"bytes,8,opt,name=r,proto3" json:"r,omitempty"`
	S             []byte                 `protobuf:"bytes,9,opt,name=s,proto3" json:"s,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LegacyTransaction) Reset() {
	*x = LegacyTransaction{}
	mi := &file_src_prover_input_proto_transaction_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegacyTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyTransaction) ProtoMessage() {}

func (x *LegacyTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_src_prover_input_proto_transaction_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyTransaction.ProtoReflect.Descriptor instead.
func (*LegacyTransaction) Descriptor() ([]byte, []int) {
	return file_src_prover_input_proto_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *LegacyTransaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *LegacyTransaction) GetGasPrice() []byte {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

func (x *LegacyTransaction) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *LegacyTransaction) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *LegacyTransaction) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *LegacyTransaction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LegacyTransaction) GetV() []byte {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *LegacyTransaction) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *LegacyTransaction) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

type AccessListTransaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainId       []byte                 `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce         uint64                 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	GasPrice      []byte                 `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	Gas           uint64                 `protobuf:"varint,4,opt,name=gas,proto3" json:"gas,omitempty"`
	To            []byte                 `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	Value         []byte                 `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	Data          []byte                 `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	AccessList    []*AccessTuple         `protobuf:"bytes,8,rep,name=access_list,json=accessList,proto3" json:"access_list,omitempty"`
	V             []byte                 `protobuf:"bytes,9,opt,name=v,proto3" json:"v,omitempty"`
	R             []byte                 `protobuf:"bytes,10,opt,name=r,proto3" json:"r,omitempty"`
	S             []byte                 `protobuf:"bytes,11,opt,name=s,proto3" json:"s,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessListTransaction) Reset() {
	*x = AccessListTransaction{}
	mi := &file_src_prover_input_proto_transaction_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessListTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessListTransaction) ProtoMessage() {}

func (x *AccessListTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_src_prover_input_proto_transaction_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessListTransaction.ProtoReflect.Descriptor instead.
func (*AccessListTransaction) Descriptor() ([]byte, []int) {
	return file_src_prover_input_proto_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *AccessListTransaction) GetChainId() []byte {
	if x != nil {
		return x.ChainId
	}
	return nil
}

func (x *AccessListTransaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *AccessListTransaction) GetGasPrice() []byte {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

func (x *AccessListTransaction) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *AccessListTransaction) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *AccessListTransaction) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AccessListTransaction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AccessListTransaction) GetAccessList() []*AccessTuple {
	if x != nil {
		return x.AccessList
	}
	return nil
}

func (x *AccessListTransaction) GetV() []byte {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *AccessListTransaction) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *AccessListTransaction) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

type DynamicFeeTransaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainId       []byte                 `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce         uint64                 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	GasTipCap     []byte                 `protobuf:"bytes,3,opt,name=gas_tip_cap,json=gasTipCap,proto3" json:"gas_tip_cap,omitempty"`
	GasFeeCap     []byte                 `protobuf:"bytes,4,opt,name=gas_fee_cap,json=gasFeeCap,proto3" json:"gas_fee_cap,omitempty"`
	Gas           uint64                 `protobuf:"varint,5,opt,name=gas,proto3" json:"gas,omitempty"`
	To            []byte                 `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	Value         []byte                 `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	Data          []byte                 `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	AccessList    []*AccessTuple         `protobuf:"bytes,9,rep,name=access_list,json=accessList,proto3" json:"access_list,omitempty"`
	V             []byte                 `protobuf:"bytes,10,opt,name=v,proto3" json:"v,omitempty"`
	R             []byte                 `protobuf:"bytes,11,opt,name=r,proto3" json:"r,omitempty"`
	S             []byte                 `protobuf:"bytes,12,opt,name=s,proto3" json:"s,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DynamicFeeTransaction) Reset() {
	*x = DynamicFeeTransaction{}
	mi := &file_src_prover_input_proto_transaction_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamicFeeTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicFeeTransaction) ProtoMessage() {}

func (x *DynamicFeeTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_src_prover_input_proto_transaction_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicFeeTransaction.ProtoReflect.Descriptor instead.
func (*DynamicFeeTransaction) Descriptor() ([]byte, []int) {
	return file_src_prover_input_proto_transaction_proto_rawDescGZIP(), []int{3}
}

func (x *DynamicFeeTransaction) GetChainId() []byte {
	if x != nil {
		return x.ChainId
	}
	return nil
}

func (x *DynamicFeeTransaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *DynamicFeeTransaction) GetGasTipCap() []byte {
	if x != nil {
		return x.GasTipCap
	}
	return nil
}

func (x *DynamicFeeTransaction) GetGasFeeCap() []byte {
	if x != nil {
		return x.GasFeeCap
	}
	return nil
}

func (x *DynamicFeeTransaction) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *DynamicFeeTransaction) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *DynamicFeeTransaction) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DynamicFeeTransaction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DynamicFeeTransaction) GetAccessList() []*AccessTuple {
	if x != nil {
		return x.AccessList
	}
	return nil
}

func (x *DynamicFeeTransaction) GetV() []byte {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *DynamicFeeTransaction) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *DynamicFeeTransaction) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

type BlobTransaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainId       []byte                 `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce         uint64                 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	GasTipCap     []byte                 `protobuf:"bytes,3,opt,name=gas_tip_cap,json=gasTipCap,proto3" json:"gas_tip_cap,omitempty"`
	GasFeeCap     []byte                 `protobuf:"bytes,4,opt,name=gas_fee_cap,json=gasFeeCap,proto3" json:"gas_fee_cap,omitempty"`
	Gas           uint64                 `protobuf:"varint,5,opt,name=gas,proto3" json:"gas,omitempty"`
	To            []byte                 `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	Value         []byte                 `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	Data          []byte                 `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	AccessList    []*AccessTuple         `protobuf:"bytes,9,rep,name=access_list,json=accessList,proto3" json:"access_list,omitempty"`
	BlobFeeCap    []byte                 `protobuf:"bytes,10,opt,name=blob_fee_cap,json=blobFeeCap,proto3" json:"blob_fee_cap,omitempty"`
	BlobHashes    [][]byte               `protobuf:"bytes,11,rep,name=blob_hashes,json=blobHashes,proto3" json:"blob_hashes,omitempty"`
	Sidecar       *BlobTxSidecar         `protobuf:"bytes,12,opt,name=sidecar,proto3" json:"sidecar,omitempty"`
	V             []byte                 `protobuf:"bytes,13,opt,name=v,proto3" json:"v,omitempty"`
	R             []byte                 `protobuf:"bytes,14,opt,name=r,proto3" json:"r,omitempty"`
	S             []byte                 `protobuf:"bytes,15,opt,name=s,proto3" json:"s,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlobTransaction) Reset() {
	*x = BlobTransaction{}
	mi := &file_src_prover_input_proto_transaction_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlobTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobTransaction) ProtoMessage() {}

func (x *BlobTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_src_prover_input_proto_transaction_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobTransaction.ProtoReflect.Descriptor instead.
func (*BlobTransaction) Descriptor() ([]byte, []int) {
	return file_src_prover_input_proto_transaction_proto_rawDescGZIP(), []int{4}
}

func (x *BlobTransaction) GetChainId() []byte {
	if x != nil {
		return x.ChainId
	}
	return nil
}

func (x *BlobTransaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *BlobTransaction) GetGasTipCap() []byte {
	if x != nil {
		return x.GasTipCap
	}
	return nil
}

func (x *BlobTransaction) GetGasFeeCap() []byte {
	if x != nil {
		return x.GasFeeCap
	}
	return nil
}

func (x *BlobTransaction) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *BlobTransaction) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *BlobTransaction) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *BlobTransaction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BlobTransaction) GetAccessList() []*AccessTuple {
	if x != nil {
		return x.AccessList
	}
	return nil
}

func (x *BlobTransaction) GetBlobFeeCap() []byte {
	if x != nil {
		return x.BlobFeeCap
	}
	return nil
}

func (x *BlobTransaction) GetBlobHashes() [][]byte {
	if x != nil {
		return x.BlobHashes
	}
	return nil
}

func (x *BlobTransaction) GetSidecar() *BlobTxSidecar {
	if x != nil {
		return x.Sidecar
	}
	return nil
}

func (x *BlobTransaction) GetV() []byte {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *BlobTransaction) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *BlobTransaction) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

type BlobTxSidecar struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blobs         [][]byte               `protobuf:"bytes,1,rep,name=blobs,proto3" json:"blobs,omitempty"`
	Commitments   [][]byte               `protobuf:"bytes,2,rep,name=commitments,proto3" json:"commitments,omitempty"`
	Proofs        [][]byte               `protobuf:"bytes,3,rep,name=proofs,proto3" json:"proofs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlobTxSidecar) Reset() {
	*x = BlobTxSidecar{}
	mi := &file_src_prover_input_proto_transaction_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlobTxSidecar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobTxSidecar) ProtoMessage() {}

func (x *BlobTxSidecar) ProtoReflect() protoreflect.Message {
	mi := &file_src_prover_input_proto_transaction_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobTxSidecar.ProtoReflect.Descriptor instead.
func (*BlobTxSidecar) Descriptor() ([]byte, []int) {
	return file_src_prover_input_proto_transaction_proto_rawDescGZIP(), []int{5}
}

func (x *BlobTxSidecar) GetBlobs() [][]byte {
	if x != nil {
		return x.Blobs
	}
	return nil
}

func (x *BlobTxSidecar) GetCommitments() [][]byte {
	if x != nil {
		return x.Commitments
	}
	return nil
}

func (x *BlobTxSidecar) GetProofs() [][]byte {
	if x != nil {
		return x.Proofs
	}
	return nil
}

type AccessTuple struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       []byte                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	StorageKeys   [][]byte               `protobuf:"bytes,2,rep,name=storage_keys,json=storageKeys,proto3" json:"storage_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessTuple) Reset() {
	*x = AccessTuple{}
	mi := &file_src_prover_input_proto_transaction_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessTuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessTuple) ProtoMessage() {}

func (x *AccessTuple) ProtoReflect() protoreflect.Message {
	mi := &file_src_prover_input_proto_transaction_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessTuple.ProtoReflect.Descriptor instead.
func (*AccessTuple) Descriptor() ([]byte, []int) {
	return file_src_prover_input_proto_transaction_proto_rawDescGZIP(), []int{6}
}

func (x *AccessTuple) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AccessTuple) GetStorageKeys() [][]byte {
	if x != nil {
		return x.StorageKeys
	}
	return nil
}

type AccessList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StorageSlots  [][]byte               `protobuf:"bytes,1,rep,name=storage_slots,json=storageSlots,proto3" json:"storage_slots,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessList) Reset() {
	*x = AccessList{}
	mi := &file_src_prover_input_proto_transaction_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessList) ProtoMessage() {}

func (x *AccessList) ProtoReflect() protoreflect.Message {
	mi := &file_src_prover_input_proto_transaction_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessList.ProtoReflect.Descriptor instead.
func (*AccessList) Descriptor() ([]byte, []int) {
	return file_src_prover_input_proto_transaction_proto_rawDescGZIP(), []int{7}
}

func (x *AccessList) GetStorageSlots() [][]byte {
	if x != nil {
		return x.StorageSlots
	}
	return nil
}

var File_src_prover_input_proto_transaction_proto protoreflect.FileDescriptor

var file_src_prover_input_proto_transaction_proto_rawDesc = []byte{
	0x0a, 0x28, 0x73, 0x72, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x22, 0xe1, 0x02, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x49, 0x0a, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x17,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x17, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x65, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x65,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x10,
	0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x42,
	0x6c, 0x6f, 0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x12, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x11, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x61, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x76, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x01, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x67, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x61, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x0a,
	0x01, 0x76, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x76, 0x12, 0x0c, 0x0a, 0x01, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x73, 0x22, 0xb3, 0x02, 0x0a, 0x15, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x46, 0x65, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x74, 0x69, 0x70, 0x5f, 0x63, 0x61,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x61, 0x73, 0x54, 0x69, 0x70, 0x43,
	0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x61,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x61, 0x73, 0x46, 0x65, 0x65, 0x43,
	0x61, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x67, 0x61, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01,
	0x76, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x72, 0x12,
	0x0c, 0x0a, 0x01, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x73, 0x22, 0xa0, 0x03,
	0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x74, 0x69, 0x70, 0x5f, 0x63, 0x61,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x61, 0x73, 0x54, 0x69, 0x70, 0x43,
	0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x61, 0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x61,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x61, 0x73, 0x46, 0x65, 0x65, 0x43,
	0x61, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x67, 0x61, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x63, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x46,
	0x65, 0x65, 0x43, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x62,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e,
	0x42, 0x6c, 0x6f, 0x62, 0x54, 0x78, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52, 0x07, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x01, 0x76, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x73,
	0x22, 0x5f, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x62, 0x54, 0x78, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x73, 0x22, 0x4a, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x75, 0x70, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x31, 0x0a,
	0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73,
	0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b,
	0x6b, 0x72, 0x74, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x7a, 0x6b, 0x2d, 0x70, 0x69, 0x67, 0x2f,
	0x73, 0x72, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_prover_input_proto_transaction_proto_rawDescOnce sync.Once
	file_src_prover_input_proto_transaction_proto_rawDescData = file_src_prover_input_proto_transaction_proto_rawDesc
)

func file_src_prover_input_proto_transaction_proto_rawDescGZIP() []byte {
	file_src_prover_input_proto_transaction_proto_rawDescOnce.Do(func() {
		file_src_prover_input_proto_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_prover_input_proto_transaction_proto_rawDescData)
	})
	return file_src_prover_input_proto_transaction_proto_rawDescData
}

var file_src_prover_input_proto_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_src_prover_input_proto_transaction_proto_goTypes = []any{
	(*Transaction)(nil),           // 0: input.Transaction
	(*LegacyTransaction)(nil),     // 1: input.LegacyTransaction
	(*AccessListTransaction)(nil), // 2: input.AccessListTransaction
	(*DynamicFeeTransaction)(nil), // 3: input.DynamicFeeTransaction
	(*BlobTransaction)(nil),       // 4: input.BlobTransaction
	(*BlobTxSidecar)(nil),         // 5: input.BlobTxSidecar
	(*AccessTuple)(nil),           // 6: input.AccessTuple
	(*AccessList)(nil),            // 7: input.AccessList
}
var file_src_prover_input_proto_transaction_proto_depIdxs = []int32{
	1, // 0: input.Transaction.legacy_transaction:type_name -> input.LegacyTransaction
	2, // 1: input.Transaction.access_list_transaction:type_name -> input.AccessListTransaction
	3, // 2: input.Transaction.dynamic_fee_transaction:type_name -> input.DynamicFeeTransaction
	4, // 3: input.Transaction.blob_transaction:type_name -> input.BlobTransaction
	6, // 4: input.AccessListTransaction.access_list:type_name -> input.AccessTuple
	6, // 5: input.DynamicFeeTransaction.access_list:type_name -> input.AccessTuple
	6, // 6: input.BlobTransaction.access_list:type_name -> input.AccessTuple
	5, // 7: input.BlobTransaction.sidecar:type_name -> input.BlobTxSidecar
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_src_prover_input_proto_transaction_proto_init() }
func file_src_prover_input_proto_transaction_proto_init() {
	if File_src_prover_input_proto_transaction_proto != nil {
		return
	}
	file_src_prover_input_proto_transaction_proto_msgTypes[0].OneofWrappers = []any{
		(*Transaction_LegacyTransaction)(nil),
		(*Transaction_AccessListTransaction)(nil),
		(*Transaction_DynamicFeeTransaction)(nil),
		(*Transaction_BlobTransaction)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_prover_input_proto_transaction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_src_prover_input_proto_transaction_proto_goTypes,
		DependencyIndexes: file_src_prover_input_proto_transaction_proto_depIdxs,
		MessageInfos:      file_src_prover_input_proto_transaction_proto_msgTypes,
	}.Build()
	File_src_prover_input_proto_transaction_proto = out.File
	file_src_prover_input_proto_transaction_proto_rawDesc = nil
	file_src_prover_input_proto_transaction_proto_goTypes = nil
	file_src_prover_input_proto_transaction_proto_depIdxs = nil
}
